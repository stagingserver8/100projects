


The idea

The idea behind this project was to create a basic ‘to-do’ list that could be used to take note of your daily priorities. The list works with your browser’s local storage, which means it does not clear when you reload it. It also has a filter feature which allows you to sort through the tasks. This project is just a slightly modified version of Brad Traversy’s one featured in ‘Modern JavaScript from the beginning’ Udemy course.

Styling

For this project, I have used the Materialize CSS framework, which meant that the look and feel of the buttons, colors, hover states, fonts etc are all taken care of. On top of elements you add to the page can be styled using classes (for e.g. “collection-item” class name gives you an item that appears as a list item). This meant that I did not have to create a separate CSS file. I have also added Font Awesome library which is an icon set (specifically for each task’s ‘‘remove icon’’). Both frameworks are activated by adding them to HTML file before the <head> using the following lines of code:

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

at the bottom of the page you should also add the following script. Those are Materialize dependencies that need to work with the code. 

<script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>

I also wanted to have the option to actually override the CSS framework by adding my own <style> component (using the internal CSS method), which I have used to style the title as well as the date. Here I have also used the flex-box method to align the the header properly on the top of the page.

HTML set up

A very basic page set up with ‘title’ div taking care of ‘‘Priorities For’’ and the date elements. This is followed by a container which includes a form with a submit (‘‘Add Task”) button, a text box to filter tasks, a <ul> element to list the tasks (future <li>s). At the very end, a Clear Tasks button. Within the form, input fields as well as a placeholder which is replaced by ‘label’ item for input field that is called (id) task. As always the end of the HTML code links to the JavaScript code page.


JavaScript 

The code begins with a number of event listeners that take the user to a given function depending what is clicked. There are five event listeners, 1. loading content from local server after DOM content has been loaded 2. adding task. 3. removing a task, 4. clearing all tasks, 5. filtering tasks.

Creating a task

Firstly, we ensure a task is actually typed in to avoid any errors. If you try to submit an empty input box you will receive an error and nothing else will happen.

We are then creating a seperate function called addTask() and use a interesting appendchild feature to a) create a text node from value that is being input and then append it to an element ‘li’’ that was created. That element ‘'li’’ is then in turn appended to the last list using taskList.appendChild(li) 

There are similar functions with regards to removing the task as well as removing all tasks from the list.

Filtering task

Filter function uses a 'on key up' function that firstly listens to what exactly you are typing into the 'Add task' window, converts what you are writing to lowercase then checks using a .indexOf() method if there is presence of the element in the item array.

Local storage

The system also deploys local storage, meaning you can easily close your browser, re-open it and you will find the data being still there.